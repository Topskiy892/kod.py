import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
from bs4 import BeautifulSoup

API_TOKEN = '7945272405:AAGKKMHbM03h8qaiYwkqsG7CGk_afJSashA'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
translations = {
    "–ö–∞–±—Ä–∏–æ": "kabrio",
    "–ö—É–ø–µ": "kupe",
    "–•—ç—Ç—á–±–µ–∫": "xetchbek",
    "3–¥–≤.": "3dv",
    "5–¥–≤": "5dv",
    "Gran Turismo": "gran-turismo",
    "–£–Ω–∏–≤–µ—Ä—Å–∞–ª": "universal",
    "–°–µ–¥–∞–Ω": "sedan",
    "–§—É—Ä–≥–æ–Ω": "furgon",
    "–ê–≤—Ç–æ–±—É—Å": "avtobus"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ car_models.txt
def parse_car_models(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        data = file.readlines()

    car_data = {}
    current_brand = ''
    current_model = ''

    for line in data:
        line = line.strip()
        if line.startswith('–ú–∞—Ä–∫–∞:'):
            current_brand = line.split('–ú–∞—Ä–∫–∞: ')[1]
            car_data[current_brand] = {}
        elif line.startswith('–ú–æ–¥–µ–ª—å:'):
            current_model = line.split('–ú–æ–¥–µ–ª—å: ')[1]
            car_data[current_brand][current_model] = []
        elif line.startswith('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è:'):
            modification = line.split('–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è: ')[1].split(', –°—Å—ã–ª–∫–∞: ')[0]
            car_data[current_brand][current_model].append(modification)
    
    return car_data

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—à–∏–Ω–∞—Ö
car_models = parse_car_models('car_models.txt')  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É car_models.txt

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
def create_link(brand, model, modification):
    model = model.replace(" ", "-").lower()

    # –ó–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ
    for ru_word, en_word in translations.items():
        model = model.replace(ru_word.lower(), en_word)

    # –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
    modification = modification.replace(",", "-").replace(" ", "-").lower()
    modification = '-'.join(filter(None, modification.split('-')))  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –¥–µ—Ñ–∏—Å—ã
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π –¥–ª—è Land Rover Defender 110
    if brand.lower() == "land rover" and model == "defender-110":
        modification = modification.replace('ld__r', 'ldr').replace('ld__p', 'ldp')

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä–æ–±–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    modification = modification.replace('.', '-')

    return f'https://www.partarium.ru/search/zapchasti-{brand}/model-{model}/{modification}/'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ —Ü–µ–Ω—ã –¥–µ—Ç–∞–ª–∏
async def parse_part_details(html_content):
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã <dd> —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
    part_elements = soup.find_all('dd', class_='py-2 pl-3 w-1/2 lg:w-fit lg:pl-0')
    
    # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç <a> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ "–ü–æ–∏—Å–∫"
    search_links = soup.find_all('a', class_='text-blue hover:text-blue-hover active:text-blue-active')

    parts = []
    current_part = {"–ù–∞–∑–≤–∞–Ω–∏–µ": None, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": None, "–ê—Ä—Ç–∏–∫—É–ª": None, "–¶–µ–Ω–∞": None}
    counter = 0  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª–µ–π

    for element in part_elements:
        text = element.text.strip()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ –ø–æ—Ä—è–¥–∫—É
        if counter == 0:
            current_part["–ù–∞–∑–≤–∞–Ω–∏–µ"] = text
        elif counter == 1:
            current_part["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = text
        elif counter == 2:
            current_part["–ê—Ä—Ç–∏–∫—É–ª"] = text
        elif counter == 3:
            current_part["–¶–µ–Ω–∞"] = text
            parts.append(current_part)
            current_part = {"–ù–∞–∑–≤–∞–Ω–∏–µ": None, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": None, "–ê—Ä—Ç–∏–∫—É–ª": None, "–¶–µ–Ω–∞": None}
        
        counter = (counter + 1) % 4  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é (—Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ 4)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
    print("Parsed parts:", parts)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–∂–¥–æ–π –∑–∞–ø—á–∞—Å—Ç—å—é –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    if not parts:
        return "–ó–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    messages = []
    for part in parts:
        # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç "–ü–æ–∏—Å–∫" –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ <a>
        search_text = search_links[-1].text.strip() if search_links else "–ü–æ–∏—Å–∫"
        part_message = (
            f"üöó –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—á–∞—Å—Ç–∏: {part['–ù–∞–∑–≤–∞–Ω–∏–µ']}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {part['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {part['–ê—Ä—Ç–∏–∫—É–ª']}\n"
            f"–¶–µ–Ω–∞: {part['–¶–µ–Ω–∞']}\n"
            f"{search_text}"
            f"–ü–æ–∏—Å–∫ –ø–æ –∞—Ä–∏–∫—É–ª—É:@zappart_bot"
        )
        messages.append(part_message)
    
    return "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n".join(messages)



# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–∞—Ä–∫–∏
def get_brands_keyboard(car_data, page=0):
    keyboard = InlineKeyboardBuilder()
    brands = list(car_data.keys())
    for index, brand in enumerate(brands[page*5:(page+1)*5]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ 5 –±—Ä–µ–Ω–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        keyboard.add(types.InlineKeyboardButton(text=brand, callback_data=f"brand:{page*5+index}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if page > 0:
        keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_brand:{page-1}"))
    if (page+1)*5 < len(brands):
        keyboard.add(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_brand:{page+1}"))

    return keyboard.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
def get_models_keyboard(car_data, brand, page=0):
    keyboard = InlineKeyboardBuilder()
    models = list(car_data[brand].keys())
    for index, model in enumerate(models[page*5:(page+1)*5]):  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ 5 –º–æ–¥–µ–ª–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        keyboard.add(types.InlineKeyboardButton(text=model, callback_data=f"model:{brand}:{page*5+index}"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –º–æ–¥–µ–ª–µ–π
    if page > 0:
        keyboard.add(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"prev_model:{brand}:{page-1}"))
    if (page+1)*5 < len(models):
        keyboard.add(types.InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_model:{brand}:{page+1}"))

    return keyboard.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
def get_modifications_keyboard(car_data, brand, model_index):
    keyboard = InlineKeyboardBuilder()
    models = list(car_data[brand].keys())
    modifications = car_data[brand][models[int(model_index)]]
    
    for modification in modifications:
        keyboard.add(types.InlineKeyboardButton(text=modification, callback_data=f"mod:{brand}:{model_index}:{modification}"))
    
    return keyboard.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=get_brands_keyboard(car_models))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
async def handle_parts_selection(query, brand, model, modification):
    url = create_link(brand, model, modification)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    await query.message.answer(f"–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å {url}...")  # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Referer': 'https://www.partarium.ru/',
        'Accept-Language': 'en-US,en;q=0.9,ru;q=0.8',
        'Connection': 'keep-alive'
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status != 200:
                await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status}")
                return
            
            html_content = await response.text()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∞—Ä—Ç–∏–∫—É–ª–∞
    part_message = await parse_part_details(html_content)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.message.answer(part_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
@dp.callback_query(lambda c: True)
async def handle_callback(query: types.CallbackQuery):
    data = query.data.split(":")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞
    if query.data.startswith("brand:"):
        brand_index = int(data[1])
        brand = list(car_models.keys())[brand_index]
        await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ä–∫–∏ {brand}:", reply_markup=get_models_keyboard(car_models, brand))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    elif query.data.startswith("model:"):
        if len(data) >= 3:
            brand = data[1]
            model_index = data[2]
            modifications_keyboard = get_modifications_keyboard(car_models, brand, model_index)
            
            if modifications_keyboard:
                await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è {brand}:", reply_markup=modifications_keyboard)
            else:
                await query.message.edit_text(f"–î–ª—è {brand} –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π.")
        else:
            await query.message.edit_text("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
    elif query.data.startswith("mod:"):
        if len(data) >= 4:
            brand = data[1]
            model_index = data[2]
            mod = data[3]
            model = list(car_models[brand].keys())[int(model_index)]
            await handle_parts_selection(query, brand, model, mod)
        else:
            await query.message.edit_text("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –º–æ–¥–µ–ª—è–º
    elif query.data.startswith("prev_brand") or query.data.startswith("next_brand"):
        page = int(data[1])
        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=get_brands_keyboard(car_models, page))

    elif query.data.startswith("prev_model") or query.data.startswith("next_model"):
        brand = data[1]
        page = int(data[2])
        await query.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –º–∞—Ä–∫–∏ {brand}:", reply_markup=get_models_keyboard(car_models, brand, page))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
